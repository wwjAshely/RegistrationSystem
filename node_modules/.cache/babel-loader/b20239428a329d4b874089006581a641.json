{"ast":null,"code":"import pubsub from 'pubsub-js';\nexport default {\n  name: 'UserItem',\n  // 声明接收todoObj对象\n  props: ['todoObj'],\n  methods: {\n    handleCheck(id) {\n      console.log(id); // 通知App组件将对应的todo对象的done值取反\n      // this.checkTodo(id)\n\n      this.$bus.$emit('checkTodo', id);\n    },\n\n    // 删除\n    handleDelete(id) {\n      if (confirm('确定删除吗')) {\n        // this.deleteTodo(id)\n        // this.$bus.$emit('deleteTodo',id)\n        pubsub.publish('deleteTodo', id);\n      }\n    },\n\n    // 编辑\n    handleEdit(todoObj) {\n      // 先判断 todoObj 上有没有 isEdit 这个属性，有就直接改值，没有就添加属性\n      // if(todoObj.hasOwnProperty('isEdit')){\n      if (Object.prototype.hasOwnProperty.call(todoObj, 'isEdit')) {\n        todoObj.isEdit = true;\n      } else {\n        // 添加一个响应式的值 isEdit\n        this.$set(todoObj, 'isEdit', true);\n      } // nextTick 所指定的回调会在下一次DOM节点更新完毕之后再执行\n\n\n      this.$nextTick(function () {\n        this.$refs.inputTitle.focus();\n      });\n    },\n\n    handleBlur(todoObj, e) {\n      todoObj.isEdit = false;\n      if (!e.target.value.trim()) return alert('输入不能为空！');\n      this.$bus.$emit('updateTodo', todoObj.id, e.target.value);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAmBA;AACA;EACAA,gBADA;EAGA;EACAC,kBAJA;EAKAC;IACAC;MACAC,gBADA,CAEA;MACA;;MACA;IACA,CANA;;IAOA;IACAC;MACA;QACA;QACA;QACAC;MACA;IACA,CAdA;;IAeA;IACAC;MACA;MACA;MACA;QACAC;MACA,CAFA,MAEA;QACA;QACA;MACA,CARA,CASA;;;MACA;QACA;MACA,CAFA;IAGA,CA7BA;;IA8BAC;MACAD;MACA;MACA;IACA;;EAlCA;AALA","names":["name","props","methods","handleCheck","console","handleDelete","pubsub","handleEdit","todoObj","handleBlur"],"sourceRoot":"src/components","sources":["UserItem.vue"],"sourcesContent":["<template>\r\n    <li>\r\n        <label>\r\n            <input type=\"checkbox\" :checked=\"todoObj.done\" @change=\"handleCheck(todoObj.id)\"/>\r\n            <span v-show=\"!todoObj.isEdit\">{{todoObj.title}}</span>\r\n            <input \r\n                red=\"inputTitle\"\r\n                type=\"text\" \r\n                v-show=\"todoObj.isEdit\" \r\n                :value=\"todoObj.title\" \r\n                @blur=\"handleBlur(todoObj,$event)\"\r\n            />\r\n        </label>\r\n        <button class=\"btn btn-danger\" @click=\"handleDelete(todoObj.id)\">删除</button>\r\n        <button class=\"btn btn-edit\" @click=\"handleEdit(todoObj)\" v-show=\"!todoObj.isEdit\">编辑</button>\r\n    </li>\r\n</template>\r\n\r\n<script>\r\n    import pubsub from 'pubsub-js'\r\n    export default {\r\n        name: 'UserItem',\r\n        \r\n        // 声明接收todoObj对象\r\n        props:['todoObj'],\r\n        methods:{\r\n            handleCheck(id){\r\n                console.log(id);\r\n                // 通知App组件将对应的todo对象的done值取反\r\n                // this.checkTodo(id)\r\n                this.$bus.$emit('checkTodo',id)\r\n            },\r\n            // 删除\r\n            handleDelete(id) {\r\n                if(confirm('确定删除吗')){\r\n                    // this.deleteTodo(id)\r\n                    // this.$bus.$emit('deleteTodo',id)\r\n                    pubsub.publish('deleteTodo',id)\r\n                }\r\n            },\r\n            // 编辑\r\n            handleEdit(todoObj) {\r\n                // 先判断 todoObj 上有没有 isEdit 这个属性，有就直接改值，没有就添加属性\r\n                // if(todoObj.hasOwnProperty('isEdit')){\r\n                if(Object.prototype.hasOwnProperty.call(todoObj,'isEdit')){\r\n                    todoObj.isEdit = true\r\n                } else{\r\n                    // 添加一个响应式的值 isEdit\r\n                    this.$set(todoObj,'isEdit',true)\r\n                }\r\n                // nextTick 所指定的回调会在下一次DOM节点更新完毕之后再执行\r\n                this.$nextTick(function () {\r\n                    this.$refs.inputTitle.focus()\r\n                })\r\n            },\r\n            handleBlur(todoObj,e) {\r\n                todoObj.isEdit = false\r\n                if(!e.target.value.trim()) return alert('输入不能为空！')\r\n                this.$bus.$emit('updateTodo',todoObj.id,e.target.value)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    /* item */\r\n    li {\r\n        list-style: none;\r\n        height: 36px;\r\n        line-height: 36px;\r\n        padding: 0 5px;\r\n        border-bottom: 1px solid #ddd;\r\n    }\r\n\r\n    li label {\r\n        float: left;\r\n        cursor: pointer;\r\n    }\r\n\r\n    li label li input {\r\n        vertical-align: middle;\r\n        margin-top: 6px;\r\n        position: relative;\r\n        top: -1px;\r\n    }\r\n\r\n    li button {\r\n        float: right;\r\n        display: none;\r\n        margin-top: 3px;\r\n        border-radius: 5px;\r\n    }\r\n\r\n    li:before {\r\n        content: initial;\r\n    }\r\n\r\n    li:last-child {\r\n        border-bottom: none;\r\n    }\r\n\r\n    li:hover{\r\n        background-color: #ddd;\r\n    }\r\n\r\n    li:hover button{\r\n        display: block;\r\n    }\r\n</style>\r\n\r\n"]},"metadata":{},"sourceType":"module"}