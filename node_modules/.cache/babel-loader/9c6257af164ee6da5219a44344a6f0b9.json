{"ast":null,"code":"// 引入组件\nimport MyHeader from './components/MyHeader'; // 因为 List 是 Item 的父，所以引入List就可以了\n\nimport UserList from './components/List';\nimport MyFooter from './components/MyFooter';\nexport default {\n  name: 'App',\n  components: {\n    MyHeader,\n    UserList,\n    MyFooter\n  },\n\n  data() {\n    return {\n      // 由于todos是MyHeader组件和MyFooter组件都在使用，所以放在App中（状态提升）\n      todos: JSON.parse(localStorage.getItem('todos')) || [] //todos有值就为前者，无值就为后者空数组,以免读取 length 属性出错\n\n    };\n  },\n\n  methods: {\n    // 添加一个todo\n    addTodo(todoObj) {\n      this.todos.unshift(todoObj);\n    },\n\n    // 勾选or取消勾选一个todo\n    checkTodo(id) {\n      this.todos.forEach(todo => {\n        if (todo.id === id) todo.done = !todo.done;\n      });\n    },\n\n    // 删除一个todo\n    deleteTodo(id) {\n      // 用过滤\n      this.todos = this.todos.filter(todo => {\n        return todo.id !== id;\n      });\n    },\n\n    // 全选or取消全校\n    checkAllTodo(done) {\n      this.todos.forEach(todo => {\n        console.log(todo);\n        todo.done = done;\n      });\n    },\n\n    // 清除所有已经完成的todo\n    clearAllTodo() {\n      this.todos = this.todos.filter(todo => {\n        return !todo.done;\n      });\n    }\n\n  },\n  watch: {\n    todos: {\n      // 监视需要深度监视，以免里面的值发生变化没反应\n      deep: true,\n\n      handler(value) {\n        localStorage.setItem('todos', JSON.stringify(value));\n      }\n\n    }\n  }\n};","map":{"version":3,"mappings":"AAeA;AACA,6C,CACA;;AACA;AACA;AAEA;EACAA,WADA;EAEAC;IACAC,QADA;IAEAC,QAFA;IAGAC;EAHA,CAFA;;EAOAC;IACA;MACA;MACAC,sDAFA,CAEA;;IAFA;EAIA,CAZA;;EAaAC;IACA;IACAC;MACA;IACA,CAJA;;IAMA;IACAC;MACA;QACA;MACA,CAFA;IAGA,CAXA;;IAaA;IACAC;MACA;MACA;QACA;MACA,CAFA;IAGA,CAnBA;;IAoBA;IACAC;MACA;QACAC;QACAC;MACA,CAHA;IAIA,CA1BA;;IA2BA;IACAC;MACA;QACA;MACA,CAFA;IAGA;;EAhCA,CAbA;EA+CAC;IACAT;MACA;MACAU,UAFA;;MAGAC;QACAC;MACA;;IALA;EADA;AA/CA","names":["name","components","MyHeader","UserList","MyFooter","data","todos","methods","addTodo","checkTodo","deleteTodo","checkAllTodo","console","todo","clearAllTodo","watch","deep","handler","localStorage"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n    <!-- 组件的结构 -->\n    <div id=\"root\">\n       <div class=\"todo-container\">\n        <div class=\"todo-wrap\">\n            <MyHeader @addTodo=\"addTodo\"></MyHeader>\n            <!-- 给 UserList 传 todos -->\n            <UserList :todos=\"todos\"/>\n            <MyFooter :todos=\"todos\" :checkAllTodo=\"checkAllTodo\" :clearAllTodo=\"clearAllTodo\"/>\n        </div>\n       </div>\n    </div>\n</template>\n\n<script>\n    // 引入组件\n    import MyHeader from './components/MyHeader';\n    // 因为 List 是 Item 的父，所以引入List就可以了\n    import UserList from './components/List';\n    import MyFooter from './components/MyFooter';\n\n    export default {\n        name:'App',\n        components:{\n            MyHeader,\n            UserList,\n            MyFooter\n        },\n        data() {\n            return {\n                // 由于todos是MyHeader组件和MyFooter组件都在使用，所以放在App中（状态提升）\n                todos:JSON.parse(localStorage.getItem('todos')) || [] //todos有值就为前者，无值就为后者空数组,以免读取 length 属性出错\n            }\n        },\n        methods: {\n            // 添加一个todo\n            addTodo(todoObj) {\n                this.todos.unshift(todoObj)\n            },\n\n            // 勾选or取消勾选一个todo\n            checkTodo(id) {\n                this.todos.forEach((todo)=>{\n                    if(todo.id === id) todo.done = !todo.done\n                })\n            },\n\n            // 删除一个todo\n            deleteTodo(id) {\n                // 用过滤\n                this.todos = this.todos.filter((todo)=>{\n                    return todo.id !== id\n                })\n            },\n            // 全选or取消全校\n            checkAllTodo(done){\n                this.todos.forEach((todo)=>{\n                    console.log(todo);\n                    todo.done = done\n                })\n            },\n            // 清除所有已经完成的todo\n            clearAllTodo() {\n                this.todos = this.todos.filter((todo)=>{\n                    return !todo.done\n                })\n            }\n        },\n        watch: {\n            todos:{\n                // 监视需要深度监视，以免里面的值发生变化没反应\n                deep:true,\n                handler(value){\n                    localStorage.setItem('todos',JSON.stringify(value))\n                }\n            }\n        }\n    }\n</script>\n\n<style>\n    /* base */\n    body{\n        background-color: #fff;\n    }\n    .btn{\n        display: inline-block;\n        padding: 4px 12px;\n        margin-bottom: 0;\n        font-size: 20px;\n        text-align: center;\n        vertical-align: middle;\n        cursor: pointer;\n        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2),0 1px 2px rgba(0, 0, 0, 0.05);\n    }\n    .btn-danger {\n        color: #fff;\n        background-color: #da4f49;\n        border: 1px solid #bd362f;\n    }\n    .btn-danger:hover {\n        color: #fff;\n        background-color: #bd362f;\n    }\n    .btn:focus {\n        outline: none;\n    }\n    .todo-container {\n        width: 600px;\n        margin: 0 auto;\n    }\n    .todo-container .todo-wrap {\n        padding: 10px;\n        border: 1px solid #ddd;\n        border-radius: 5px;\n    }\n\n</style>"]},"metadata":{},"sourceType":"module"}